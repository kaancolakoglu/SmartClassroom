name: Production Deployment

on:
  push:
    branches: [ main ]
  workflow_dispatch: # Allows manual triggering

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven

      - name: Build with Maven
        run: mvn -B package --file pom.xml

      - name: Verify JAR file exists
        run: ls -la target/

      - name: Run tests
        run: mvn test -Dspring.profiles.active=prod
        env:
          PROD_DB_URL: ${{ secrets.PROD_DB_URL }}
          PROD_DB_USERNAME: ${{ secrets.PROD_DB_USERNAME }}
          PROD_DB_PASSWORD: ${{ secrets.PROD_DB_PASSWORD }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Deploy CloudFormation stack with parameters
      - name: Deploy CloudFormation stack
        run: |
          aws cloudformation deploy \
            --template-file infrastructure/cloudformation.yml \
            --stack-name smart-classroom-infrastructure \
            --capabilities CAPABILITY_IAM \
            --no-fail-on-empty-changeset \
            --parameter-overrides \
              SolutionStackName="64bit Amazon Linux 2023 v4.2.0 running Corretto 21" \
              ProdDbUrl="${{ secrets.PROD_DB_URL }}" \
              ProdDbUsername="${{ secrets.PROD_DB_USERNAME }}" \
              ProdDbPassword="${{ secrets.PROD_DB_PASSWORD }}" \
              AwsRegion="${{ secrets.AWS_REGION }}"

      # Get outputs from CloudFormation stack
      - name: Get CloudFormation outputs
        id: cf-outputs
        run: |
          ECR_REPO_URI=$(aws cloudformation describe-stacks --stack-name smart-classroom-infrastructure --query "Stacks[0].Outputs[?OutputKey=='ECRRepositoryURI'].OutputValue" --output text)
          echo "ECR_REPO_URI=$ECR_REPO_URI" >> $GITHUB_ENV

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        env:
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build --build-arg SPRING_PROFILE=prod -f src/main/docker/Dockerfile -t $ECR_REPO_URI:$IMAGE_TAG .
          docker push $ECR_REPO_URI:$IMAGE_TAG

      - name: Deploy to Elastic Beanstalk
        uses: einaregilsson/beanstalk-deploy@v21
        with:
          aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          application_name: smart-classroom
          environment_name: production
          version_label: ${{ github.sha }}
          region: ${{ secrets.AWS_REGION }}
          deployment_package: target/smart-classroom-occupancy-system.jar